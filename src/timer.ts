import * as vscode from 'vscode';
var intervalId: NodeJS.Timeout; 
var timeoutId: NodeJS.Timeout;
var lastInput: number;
let configBreakTime = vscode.workspace.getConfiguration("fun").get("breaktime");
var breaktime:number = configBreakTime === undefined ? 1 :  Number(configBreakTime);
var timerBar: vscode.StatusBarItem;
var iconBar: vscode.StatusBarItem;
iconBar = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, 99);
timerBar = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, 100);
vscode.commands.registerCommand('fun-extension.enterTime', () => {
    vscode.window.showInputBox({
        prompt: "‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤",
        placeHolder: '‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ',
        value: "10",
        validateInput: (minutesStr) => {
            let minutes = Number(minutesStr);
            if(isNaN(minutes)){
                return '‚ùå‚ùå‚ùå ‡∏Å‡∏£‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ô‡πâ‡∏≤ ‚ùå‚ùå‚ùå';
            }
            return undefined;
        }
    }).then(minutesStr => {
        let minutes = Number(minutesStr);
        setTimer(minutes, "üë®‚Äçüíª");
    });
});
timerBar.text = "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤";
timerBar.command = "fun-extension.enterTime";
timerBar.show();

function setTimer(timerMinutes: number, icon: string){
	if(!(intervalId === undefined)){
		clearInterval(intervalId);
		clearTimeout(timeoutId);
	}
	iconBar.text = icon;
	iconBar.show();
	lastInput = timerMinutes;
	let count = timerMinutes * 60;
	intervalId = setInterval(()=>{
		count = count - 1;
		let minutes = Math.floor(count / 60);
		let seconds = count % 60;
		timerBar.text = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
		timerBar.show();
	}, 1000);
	timeoutId = setTimeout(()=>{
		iconBar.hide();
		timerBar.text = "‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß";
		timerBar.show();
		clearInterval(intervalId);
		if(icon === "üë®‚Äçüíª"){
			vscode.window.showInformationMessage("‡∏û‡∏±‡∏Å‡∏´‡∏ô‡πà‡∏≠‡∏¢‡πÑ‡∏´‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏•‡∏¢", {
				modal: true
			}, `‡∏≠‡∏¢‡∏≤‡∏Å‡∏û‡∏±‡∏Å‡πÅ‡∏•‡πâ‡∏ß (${breaktime} ‡∏ô‡∏≤‡∏ó‡∏µ)`, `‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏±‡∏ô (${lastInput} ‡∏ô‡∏≤‡∏ó‡∏µ)`).then((result) => {
				if(result === undefined){
					vscode.window.showInformationMessage("‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏≠ ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å‡∏ó‡∏∏‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏¢‡∏ô‡∏∞");
				}else if(result === `‡∏≠‡∏¢‡∏≤‡∏Å‡∏û‡∏±‡∏Å‡πÅ‡∏•‡πâ‡∏ß (${breaktime} ‡∏ô‡∏≤‡∏ó‡∏µ)`){
					setTimer(breaktime, "üßò‚Äç‚ôÇÔ∏è");
				}else if(result === `‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏±‡∏ô (${lastInput} ‡∏ô‡∏≤‡∏ó‡∏µ)`) {
					setTimer(lastInput, "üë®‚Äçüíª");
				}
			});
		}else{
			vscode.window.showInformationMessage("‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏¢‡∏≤‡∏Å‡∏û‡∏±‡∏Å‡∏ï‡πà‡∏≠‡∏≠‡∏µ‡∏Å‡∏ô‡∏¥‡∏î", {
				modal: true
			}, "‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß", `‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏≤‡∏¢‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡πÄ‡∏•‡∏¢ (${breaktime} ‡∏ô‡∏≤‡∏ó‡∏µ)`).then((result) => {
				if(result === undefined){
					vscode.window.showInformationMessage("‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏≠ ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å‡∏ó‡∏∏‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏¢‡∏ô‡∏∞");
				}else if(result === "‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß"){
					vscode.commands.executeCommand("fun-extension.enterTime");
				}else if(result === `‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏≤‡∏¢‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡πÄ‡∏•‡∏¢ (${breaktime} ‡∏ô‡∏≤‡∏ó‡∏µ)`) {
					setTimer(breaktime, "üßò‚Äç‚ôÇÔ∏è");
				}
			});
		}
	}, timerMinutes * 60 * 1000);
}
export {iconBar,timerBar};